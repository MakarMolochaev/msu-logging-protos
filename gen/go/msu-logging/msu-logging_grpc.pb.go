// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: msu-logging/msu-logging.proto

package msu_loggingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TranscribeServier_SendTranscribeResult_FullMethodName = "/msu_logging.TranscribeServier/SendTranscribeResult"
)

// TranscribeServierClient is the client API for TranscribeServier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranscribeServierClient interface {
	SendTranscribeResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*TranscribeResult, error)
}

type transcribeServierClient struct {
	cc grpc.ClientConnInterface
}

func NewTranscribeServierClient(cc grpc.ClientConnInterface) TranscribeServierClient {
	return &transcribeServierClient{cc}
}

func (c *transcribeServierClient) SendTranscribeResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*TranscribeResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranscribeResult)
	err := c.cc.Invoke(ctx, TranscribeServier_SendTranscribeResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranscribeServierServer is the server API for TranscribeServier service.
// All implementations must embed UnimplementedTranscribeServierServer
// for forward compatibility.
type TranscribeServierServer interface {
	SendTranscribeResult(context.Context, *Result) (*TranscribeResult, error)
	mustEmbedUnimplementedTranscribeServierServer()
}

// UnimplementedTranscribeServierServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTranscribeServierServer struct{}

func (UnimplementedTranscribeServierServer) SendTranscribeResult(context.Context, *Result) (*TranscribeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTranscribeResult not implemented")
}
func (UnimplementedTranscribeServierServer) mustEmbedUnimplementedTranscribeServierServer() {}
func (UnimplementedTranscribeServierServer) testEmbeddedByValue()                           {}

// UnsafeTranscribeServierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranscribeServierServer will
// result in compilation errors.
type UnsafeTranscribeServierServer interface {
	mustEmbedUnimplementedTranscribeServierServer()
}

func RegisterTranscribeServierServer(s grpc.ServiceRegistrar, srv TranscribeServierServer) {
	// If the following call pancis, it indicates UnimplementedTranscribeServierServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TranscribeServier_ServiceDesc, srv)
}

func _TranscribeServier_SendTranscribeResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscribeServierServer).SendTranscribeResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscribeServier_SendTranscribeResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscribeServierServer).SendTranscribeResult(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

// TranscribeServier_ServiceDesc is the grpc.ServiceDesc for TranscribeServier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TranscribeServier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msu_logging.TranscribeServier",
	HandlerType: (*TranscribeServierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTranscribeResult",
			Handler:    _TranscribeServier_SendTranscribeResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msu-logging/msu-logging.proto",
}

const (
	ProtocolServer_SendProtocolResult_FullMethodName = "/msu_logging.ProtocolServer/SendProtocolResult"
)

// ProtocolServerClient is the client API for ProtocolServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtocolServerClient interface {
	SendProtocolResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*ProtocolResult, error)
}

type protocolServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProtocolServerClient(cc grpc.ClientConnInterface) ProtocolServerClient {
	return &protocolServerClient{cc}
}

func (c *protocolServerClient) SendProtocolResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*ProtocolResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProtocolResult)
	err := c.cc.Invoke(ctx, ProtocolServer_SendProtocolResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtocolServerServer is the server API for ProtocolServer service.
// All implementations must embed UnimplementedProtocolServerServer
// for forward compatibility.
type ProtocolServerServer interface {
	SendProtocolResult(context.Context, *Result) (*ProtocolResult, error)
	mustEmbedUnimplementedProtocolServerServer()
}

// UnimplementedProtocolServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProtocolServerServer struct{}

func (UnimplementedProtocolServerServer) SendProtocolResult(context.Context, *Result) (*ProtocolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProtocolResult not implemented")
}
func (UnimplementedProtocolServerServer) mustEmbedUnimplementedProtocolServerServer() {}
func (UnimplementedProtocolServerServer) testEmbeddedByValue()                        {}

// UnsafeProtocolServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtocolServerServer will
// result in compilation errors.
type UnsafeProtocolServerServer interface {
	mustEmbedUnimplementedProtocolServerServer()
}

func RegisterProtocolServerServer(s grpc.ServiceRegistrar, srv ProtocolServerServer) {
	// If the following call pancis, it indicates UnimplementedProtocolServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProtocolServer_ServiceDesc, srv)
}

func _ProtocolServer_SendProtocolResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServerServer).SendProtocolResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtocolServer_SendProtocolResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServerServer).SendProtocolResult(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtocolServer_ServiceDesc is the grpc.ServiceDesc for ProtocolServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtocolServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msu_logging.ProtocolServer",
	HandlerType: (*ProtocolServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendProtocolResult",
			Handler:    _ProtocolServer_SendProtocolResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msu-logging/msu-logging.proto",
}
